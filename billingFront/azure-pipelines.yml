# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'aa2eb7b9-c497-49b2-a015-bd79c0338d67'
  imageRepository: 'billingfront'
  containerRegistry: 'conteinerbilling.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  buildTag: '$(Build.BuildId)'
  latestTag: 'latest'

stages:
- stage: 'build'
  displayName: 'Build the application' 
  jobs:
   - job: 'build'
     pool:
       vmImage: ubuntu-latest  

     steps:
     - task: NodeTool@0
       inputs:
         versionSpec: '18.14.x'
       displayName: 'Install Node.js'

     - task: Cache@2
       inputs:
         key: 'npm | "$(Agent.OS)" | package-lock.json'
         restoreKeys: |
            npm | "$(Agent.OS)"
         path: $(npm_config_cache)
       displayName: Cache npm

     - script: |
         npm install -g npm
         npm install -g @angular/cli@latest
         npm install

         # Ajustar la configuraci√≥n de OpenSSL
         export NODE_OPTIONS=--openssl-legacy-provider

         ng build --aot
       displayName: 'npm install and build'
  
     - task: ArchiveFiles@2
       inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/' 
        includeRootFolder: true 
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(build.artifactstagingdirectory)/$(Build.BuildId).zip' 
        replaceExistingArchive: true 
        verbose: true # Optional

     - task: PublishBuildArtifacts@1
       displayName: 'Publish Artifact: released_package'
       condition: succeeded()

     - task: Docker@2
       inputs:  
         containerRegistry: '$(dockerRegistryServiceConnection)'
         repository: '$(imageRepository)'
         command: 'build'
         Dockerfile: '$(dockerfilePath)'
         buildContext: '$(System.DefaultWorkingDirectory)'
         tags: |
           $(buildTag)
           $(latestTag)
         arguments: '--build-arg DIST="dist/billingApp" --build-arg CONFIG_FILE="nginx.conf"'
         
     - task: Docker@2
       displayName: 'Push an image to container registry'
       inputs:
         containerRegistry: '$(dockerRegistryServiceConnection)'
         repository: '$(imageRepository)'
         command: 'push'
         tags: |
           $(buildTag)
           $(latestTag)
